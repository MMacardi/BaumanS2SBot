package application

import (
	"BaumanS2SBot/internal/application/states"
	"BaumanS2SBot/internal/infrastructure/storage/cache"
	"BaumanS2SBot/internal/model"
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jmoiron/sqlx"
	"log"
	"time"
)

func GetCleverUsersSlice(ctx context.Context, db *sqlx.DB, categoryID int) ([]int64, error) {
	query := `SELECT user_id FROM user_categories WHERE category_id = $1`

	var cleverUserIDSlice []int64

	err := db.SelectContext(ctx, &cleverUserIDSlice, query, categoryID)

	if err != nil {
		return nil, err
	}

	return cleverUserIDSlice, nil
}

func ChooseCategory(session *model.UserSession, update tgbotapi.Update, ctx context.Context, db *sqlx.DB,
	bot *tgbotapi.BotAPI, userID int64, userStates map[int64]int) {
	if update.Message.Text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω" {
		SendHomeKeyboard(bot, update.Message.Chat.ID, userStates, userID, states.StateHome)
	} else if categoryID, found := GetKeyByValue(GetCategories(ctx, db), update.Message.Text); found {
		categoryChosen := update.Message.Text
		session.CategoryChosen = categoryChosen
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: "+
			"<b>"+categoryChosen+"</b>"+
			"\n–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ä–æ–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–º–æ—â—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã –î–∞—Ç–∞.–ú–µ—Å—è—Ü.–ì–æ–¥ (–ü—Ä–∏–º–µ—Ä: 19:15 01.12.2023)")
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω")))
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Error with sending chosen category msg %v", err)
		}

		userStates[userID] = states.StateFormingRequestForHelp
		helpCategoryID := categoryID
		session.HelpCategoryID = helpCategoryID
		return
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ:")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Error with sending chosen category msg %v", err)
		}
		userStates[userID] = states.StateFormingRequestForHelp
	}
	return

}

func FormingRequest(session *model.UserSession, update tgbotapi.Update,
	bot *tgbotapi.BotAPI, userID int64, userStates map[int64]int, dateTimeLayout string, loc *time.Location) {
	if update.Message.Text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω" {
		SendHomeKeyboard(bot, update.Message.Chat.ID, userStates, userID, states.StateHome)
		return
	} else {
		// date
		dateTimeText := update.Message.Text

		parsedDateTime, err := time.ParseInLocation(dateTimeLayout, dateTimeText, loc)

		userYear := parsedDateTime.Year()
		now := time.Now().In(loc)
		currentYear := now.Year()

		if err != nil || parsedDateTime.Before(now) || userYear > currentYear+1 {
			log.Printf("Error while parsing date and time: %v", err)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç "+
				"–∏–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ (—Å—Ä–æ–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–≥–æ –≥–æ–¥–∞)"+
				"\n –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –î.–ú.–ì (–ü—Ä–∏–º–µ—Ä: 19:15 01.12.2023)")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Error with sending error msg  %v", err)
			}
			userStates[userID] = states.StateFormingRequestForHelp
		} else {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
			if _, err := bot.Send(msg); err != nil {
				log.Fatalf("Error with sending –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ msg: %v", err)
			}
			userStates[userID] = states.StateConfirmationRequestForHelp
		}
		session.DateTimeText = dateTimeText
		session.ParsedDateTime = parsedDateTime
		return
	}
}

func ConfirmRequest(session *model.UserSession, update tgbotapi.Update,
	bot *tgbotapi.BotAPI, userID int64, chatID int64, userStates map[int64]int) {
	originMessageID := update.Message.MessageID
	session.OriginMessageID = originMessageID
	originMessage := tgbotapi.NewCopyMessage(chatID,
		chatID, originMessageID)
	session.OriginMessage = originMessage
	if update.Message.Text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω" {
		SendHomeKeyboard(bot, update.Message.Chat.ID, userStates, userID, states.StateHome)
	} else {
		SendConfirmationKeyboard(bot, update.Message.Chat.ID)
		userStates[userID] = states.StateSendingRequestForHelp
	}
	return
}

func SendingRequest(session *model.UserSession, ctx context.Context, db *sqlx.DB, update tgbotapi.Update,
	bot *tgbotapi.BotAPI, userID int64, userStates map[int64]int, debug bool) {
	if update.Message.Text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω" {
		SendHomeKeyboard(bot, update.Message.Chat.ID, userStates, userID, states.StateHome)
	} else if update.Message.Text == "–î–∞" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			fmt.Sprintf("–í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–º–æ—â—å –ø–æ —Ç–µ–º–µ: <b>%v</b>\n–°—Ä–æ–∫ –¥–æ: <b>%v</b>\n–û–ø–∏—Å–∞–Ω–∏–µ: \n", session.CategoryChosen, session.DateTimeText))
		msg.ParseMode = "HTML"
		_, err := bot.Send(msg)
		if err != nil {
			log.Fatalf("Can't send congrats forming request: %v", err)
		}

		inlineBtn := tgbotapi.NewInlineKeyboardButtonData("–ú–Ω–µ –ø–æ–º–æ–≥–ª–∏ ! üéâ", fmt.Sprintf("deleteRequest:%v", session.OriginMessageID))
		inlineKbd := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(inlineBtn))

		session.OriginMessage.ReplyMarkup = inlineKbd

		origMsg, err := bot.Send(session.OriginMessage)
		if err != nil {
			log.Fatalf("Can't send cograts forming request: %v", err)
		}

		err = cache.AddRequest("./internal/infrastructure/storage/cache/cache.json",
			userID,
			origMsg.MessageID,
			session.ParsedDateTime,
			0)

		if err != nil {
			log.Fatalf("can't addRequest to json file: %v", err)
		}

		cleverUserIDSlice, err := GetCleverUsersSlice(ctx, db, session.HelpCategoryID)

		if err != nil {
			log.Fatalf("can't get clever user's id %v", err)
		}

		// admin method lmao
		var adminID int64 = 865277762
		if debug == false {
			cleverUserIDSlice = append(cleverUserIDSlice, adminID)
		}

		SendingToCleverUsers(session, update, bot, cleverUserIDSlice)

		if debug == false {

			session.OriginMessage.ChatID = adminID

			if _, err := bot.Send(tgbotapi.NewMessage(adminID, "–ê–¥–º–∏–Ω –ª–æ–≤–∏, –Ω–æ —É—á—Ç–∏ - –µ—Å–ª–∏ —Ç—ã —Å–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å, —Ç–æ –Ω–∞ –≤–µ—Ä—Ö–Ω—é—é –∫–Ω–æ–ø–æ—á–∫—É,"+
				"–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è, —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–∏—à—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã —É–¥–∞–ª–∏–ª —É–∂–µ –Ω–∞ –Ω–∏–∂–Ω—é—é :0")); err != nil {
				log.Printf("Error Sending msg to admin %v", err)
			}

			if _, err := bot.Send(session.OriginMessage); err != nil {
				log.Fatalf("Can't send cograts forming request: %v", err)
			}
		}

		SendHomeKeyboard(bot, update.Message.Chat.ID, userStates, userID, states.StateHome)
		return
	} else if update.Message.Text == "–ù–µ—Ç" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
		if _, err := bot.Send(msg); err != nil {
			log.Fatalf("Error with sending –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ msg: %v", err)
		}
		userStates[userID] = states.StateConfirmationRequestForHelp
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ: –î–∞/–ù–µ—Ç")
		if _, err := bot.Send(msg); err != nil {
			log.Fatalf("Error with sending –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ msg: %v", err)
		}
		userStates[userID] = states.StateSendingRequestForHelp
	}
	return
}

func SendingToCleverUsers(session *model.UserSession, update tgbotapi.Update,
	bot *tgbotapi.BotAPI, cleverUserIDSlice []int64) {
	for _, cleverUserID := range cleverUserIDSlice {
		// –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∏ –¥–µ–¥–ª–∞–π–Ω

		msg := tgbotapi.NewMessage(cleverUserID, fmt.Sprintf("–¢–µ–º–∞ <b>%v</b> \n"+
			"–û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: @%v "+
			"\n–ê–∫—Ç—É–∞–ª—å–Ω–æ –¥–æ %v\n–û–ø–∏—Å–∞–Ω–∏–µ:",
			session.CategoryChosen,
			update.Message.From.UserName,
			session.DateTimeText))
		msg.ParseMode = "HTML"

		sentMsg, err := bot.Send(msg)
		if err != nil {
			log.Fatalf("Can't forward message to clever guys with id: %v %v", cleverUserID, err)
		}

		err = cache.AddRequest("./internal/infrastructure/storage/cache/cache.json",
			cleverUserID,
			session.OriginMessageID,
			session.ParsedDateTime,
			sentMsg.MessageID)

		if err != nil {
			log.Fatalf("can't addRequest to json file: %v", err)
		}

		// –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
		forwardMsg := tgbotapi.NewCopyMessage(cleverUserID,
			update.Message.Chat.ID, session.OriginMessageID)

		sentDescriptionMsg, err := bot.Send(forwardMsg)
		if err != nil {
			log.Fatalf("Can't forward message to clever guys with id: %v %v", cleverUserID, err)
		}

		err = cache.AddRequest("./internal/infrastructure/storage/cache/cache.json",
			cleverUserID, session.OriginMessageID, session.ParsedDateTime, sentDescriptionMsg.MessageID)
		log.Print(cleverUserID, session.OriginMessageID, session.ParsedDateTime, sentDescriptionMsg.MessageID)
		if err != nil {
			log.Fatalf("can't addRequest to json file: %v", err)
		}
	}

}

// TODO: func SendUserRequests()
